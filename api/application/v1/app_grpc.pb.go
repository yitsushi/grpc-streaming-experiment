// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationServiceClient is the client API for ApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServiceClient interface {
	ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (ApplicationService_ListPodsClient, error)
}

type applicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServiceClient(cc grpc.ClientConnInterface) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (ApplicationService_ListPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationService_ServiceDesc.Streams[0], "/application.v1.ApplicationService/ListPods", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationServiceListPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationService_ListPodsClient interface {
	Recv() (*ListPodsResponse, error)
	grpc.ClientStream
}

type applicationServiceListPodsClient struct {
	grpc.ClientStream
}

func (x *applicationServiceListPodsClient) Recv() (*ListPodsResponse, error) {
	m := new(ListPodsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationServiceServer is the server API for ApplicationService service.
// All implementations must embed UnimplementedApplicationServiceServer
// for forward compatibility
type ApplicationServiceServer interface {
	ListPods(*ListPodsRequest, ApplicationService_ListPodsServer) error
	mustEmbedUnimplementedApplicationServiceServer()
}

// UnimplementedApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServiceServer struct {
}

func (UnimplementedApplicationServiceServer) ListPods(*ListPodsRequest, ApplicationService_ListPodsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (UnimplementedApplicationServiceServer) mustEmbedUnimplementedApplicationServiceServer() {}

// UnsafeApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServiceServer will
// result in compilation errors.
type UnsafeApplicationServiceServer interface {
	mustEmbedUnimplementedApplicationServiceServer()
}

func RegisterApplicationServiceServer(s grpc.ServiceRegistrar, srv ApplicationServiceServer) {
	s.RegisterService(&ApplicationService_ServiceDesc, srv)
}

func _ApplicationService_ListPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPodsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationServiceServer).ListPods(m, &applicationServiceListPodsServer{stream})
}

type ApplicationService_ListPodsServer interface {
	Send(*ListPodsResponse) error
	grpc.ServerStream
}

type applicationServiceListPodsServer struct {
	grpc.ServerStream
}

func (x *applicationServiceListPodsServer) Send(m *ListPodsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ApplicationService_ServiceDesc is the grpc.ServiceDesc for ApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.v1.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPods",
			Handler:       _ApplicationService_ListPods_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/application/v1/app.proto",
}
